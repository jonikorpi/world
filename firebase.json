{"rules": {

  "locations": {
    ".write": "auth.worldmaster === true",
    "$locationID": {
      /* TODO generate complicated neighbour rules based on adj. locations */
      /* (pos(playerid).bx + "" == $binx &&  pos(playerid).by + "" == $biny) || //and the other 5 adjacent bin coords */
      ".read": "auth != null",
      "x": { ".validate": "newData.isNumber()" },
      "y": { ".validate": "newData.isNumber()" },
      "player": {
        "playerID": { ".validate": "newData.isString()" },
        "turn": { ".validate": "newData.isNumber()" },
        "orientation": { ".validate": "newData.isNumber()" }, /* 0 = N */
        "secrets": { ".validate": "newData.isNumber()" },
        "emote": {
          "type": { ".validate": "newData.isString()" },
          "turn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */
        },
        "action": {
          "type": { ".validate": "newData.isString()" },
          "turn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */
        },
        "health": {
          "originalMax": { ".validate": "newData.isNumber()" },
          "max":         { ".validate": "newData.isNumber()" },
          "current":     { ".validate": "newData.isNumber()" },
        },
        "attack": {
          "original": { ".validate": "newData.isNumber()" },
          "current":  { ".validate": "newData.isNumber()" },
        },
        "mana": {
          "current": { ".validate": "newData.isNumber()" },
          "max":     { ".validate": "newData.isNumber()" },
        },
        "playedCards": {
          "$cardKey": { ".validate": "newData.isString()" },
        },
        "$unitID": {
          ".validate": "
               $unitID === 'frontLeft'
            || $unitID === 'front'
            || $unitID === 'frontRight'
            || $unitID === 'backRight'
            || $unitID === 'back'
            || $unitID === 'backLeft'
          ",
          "type": { ".validate": "newData.isString()" },
          "action": {
            "type": { ".validate": "newData.isString()" },
            "turn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */
          },
          "health": {
            "originalMax": { ".validate": "newData.isNumber()" },
            "max":         { ".validate": "newData.isNumber()" },
            "current":     { ".validate": "newData.isNumber()" },
          },
          "attack": {
            "original": { ".validate": "newData.isNumber()" },
            "current":  { ".validate": "newData.isNumber()" },
          },
        },
      },
    },
  },

  "playerSecrets": {
    ".write": "auth.worldmaster === true",
    "$playerID": {
      ".read": "
           (auth != null && auth.uid === $playerID)
        || auth.worldmaster === true
      ",
      "message": { ".validate": "newData.isString()" },
      "locationID": { ".validate": "newData.isString()" },
      "cards": {
        "$cardKey": { ".validate": "newData.isString()" },
      },
      "cardLocationID": { ".validate": "newData.isString()" },
      "lockedCardLocationIDs": {
        "$lockedCardLocationID": { ".validate": "newData.isString()" },
      },
    },
  },

  "players": {
    "$playerID": {
      ".read": "auth != null",
      ".write": "
           (auth != null && auth.uid === $playerID)
        || auth.worldmaster === true
      ",
      /* TODO flag */
      "$other": { ".validate": "false" },
    },
  },

}}
