{"rules": {

  "locations": {
    ".write": "auth.worldmaster === true",
    ".indexOn": "playerID",
    "$locationID": {
      /* TODO generate complicated neighbour rules based on adj. locations */
      /* (pos(playerid).bx + "" == $binx &&  pos(playerid).by + "" == $biny) || //and the other 5 adjacent bin coords */
      ".read": "auth != null",

      "x": { ".validate": "newData.isNumber()" },
      "y": { ".validate": "newData.isNumber()" },

      "tile": { ".validate": "newData.isString()" },
      "playerID": { ".validate": "newData.isString()" },

      "$other": { ".validate": "false" }
    }
  },

  "players": {
    ".write": "auth.worldmaster === true",
    "$playerID": {
      /* TODO generate complicated neighbour rules based on adj. locations */
      /* If no x/y, allow reading */
      /* (pos(playerid).bx + "" == $binx &&  pos(playerid).by + "" == $biny) || //and the other 5 adjacent bin coords */
      ".read": "(auth != null && auth.uid === $playerID) || auth.worldmaster === true",

      "x": { ".validate": "newData.isNumber()" },
      "y": { ".validate": "newData.isNumber()" },

      "locked": { ".validate": "newData.isBoolean()" },
      "immuneUntil": { ".validate": "newData.isNumber()" },

      "emoteType": { ".validate": "newData.isString()" },
      "emoteTurn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */

      "actionType": { ".validate": "newData.isString()" },
      "actionTurn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */

      "originalMaxHealth": { ".validate": "newData.isNumber()" },
      "maxHealth":         { ".validate": "newData.isNumber()" },
      "currentHealth":     { ".validate": "newData.isNumber()" },
      "originalAttack": { ".validate": "newData.isNumber()" },
      "currentAttack":  { ".validate": "newData.isNumber()" },

      "$other": { ".validate": "false" }
    }
  },

  "playerSettings": {
    "$playerID": {
      ".read":  "(auth != null && auth.uid === $playerID) || auth.worldmaster === true",
      ".write": "(auth != null && auth.uid === $playerID) || auth.worldmaster === true"
      /* TODO flag/mask/icon/logo + copy to players on spawn */
    }
  }

}}
