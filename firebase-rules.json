{
  "rules": {
    "players": {
      ".read": "auth != null",
      ".indexOn": "position/~~xy",
      "$playerID": {
        "position": {
          ".write": "auth.uid === $playerID",
          // TODO:
          // - later: throttle position updates
          // - validate
          //   && !player.sector.collidables.hasChild("" + ~x + "," + ~y)
          //
          //   && ((oldX - newX) * (oldX - newX))^2 <= ((oldTime - newTime) / 1000 * maxV)^2
          //   && (v <= player.maxV) // maybe try to delay this if maxV has changed recently
          //
          // Ensure all fields are set
          // Require updates within 5s or an updateless refresh
          ".validate": "newData.hasChildren(['x', 'y', 'vx', 'vy', 't', '~x', '~y', '~xy', '~~x', '~~y', '~~xy']) && (( (newData.child('t').val() - data.child('t').val() < 5000) || (data.child('x').val()===newData.child('x').val() && data.child('y').val()===newData.child('y').val() && data.child('~x').val()===newData.child('~x').val() && data.child('~y').val()===newData.child('~y').val() && data.child('~xy').val()===newData.child('~xy').val() && data.child('~~x').val()===newData.child('~~x').val() && data.child('~~y').val()===newData.child('~~y').val() && data.child('~~xy').val()===newData.child('~~xy').val()) ))",
          "x": {
            ".validate": "newData.isNumber()"
          },
          "y": {
            ".validate": "newData.isNumber()"
          },
          "vx": {
            ".validate": "newData.isNumber()"
          },
          "vy": {
            ".validate": "newData.isNumber()"
          },
          "t": {
            ".validate": "newData.val() === now"
          },
          // Ensure ~x is a rounded x
          // Ensure ~y is a rounded y
          "~x": {
            ".validate": "newData.isNumber() && newData.val() % 1 === 0 && (newData.parent().child('x').val() >= newData.val() && newData.parent().child('x').val() <= newData.val()+1)"
          },
          "~y": {
            ".validate": "newData.isNumber() && newData.val() % 1 === 0 && (newData.parent().child('y').val() >= newData.val() && newData.parent().child('y').val() <= newData.val()+1)"
          },
          // Ensure ~xy = ~x,~y
          "~xy": {
            ".validate": "newData.isString() && newData.val() === (newData.parent().child('~x').val() + ',' + newData.parent().child('~y').val())"
          },
          // Ensure ~~x is a rounded x * 100
          // Ensure ~~y is a rounded y * 100
          "~~x": {
            ".validate": "newData.isNumber() && newData.val() % 100 === 0 && (newData.parent().child('x').val() >= newData.val() && newData.parent().child('x').val() <= newData.val()+100)"
          },
          "~~y": {
            ".validate": "newData.isNumber() && newData.val() % 100 === 0 && (newData.parent().child('y').val() >= newData.val() && newData.parent().child('y').val() <= newData.val()+100)"
          },
          // Ensure ~~xy = ~~x,~~y
          "~~xy": {
            ".validate": "newData.isString() && newData.val() === (newData.parent().child('~~x').val() + ',' + newData.parent().child('~~y').val())"
          },
          "$other": {
            ".validate": "false"
          }
        },
        "state": {
          // TODO: flag, copied from playerSettings
          "health": {
            ".validate": "newData.isNumber()"
          },
          "meleeRange": {
            ".validate": "newData.isNumber()"
          },
          "attackRange": {
            ".validate": "newData.isNumber()"
          },
          "faction": {
            ".validate": "newData.isString()"
          },
          "immuneUntil": {
            ".validate": "newData.isNumber()"
          },
          "turn": {
            ".validate": "newData.isNumber()"
          },
          "emoteType": {
            ".validate": "newData.isString()"
          },
          "emoteTime": {
            ".validate": "newData.isNumber()"
          },
          "actionType": {
            ".validate": "newData.isString()"
          },
          "actionTurn": {
            ".validate": "newData.isNumber()"
          }, /* Use with `turnMounted` */
          "equipment": {
            "$itemID": {
              ".validate": "newData.isNumber()"
            } /* Durability */
          },
          "$other": {
            ".validate": "false"
          }
        },
        "$other": {
          ".validate": "false"
        }
      }
    },
    "playerSecrets": {
      "$playerID": {
        ".read": "(auth != null && auth.uid === $playerID)",
        "inventory": {
          "$itemID": {
            ".validate": "newData.isBoolean()"
          }
        }
      }
    },
    "playerSettings": {
      "$playerID": {
        ".read": "(auth != null && auth.uid === $playerID)",
        ".write": "(auth != null && auth.uid === $playerID)"
        // TODO flag + copy to players on spawn
      }
    },
    "sectorEntities": {
      "$sectorID": {
        ".read": "auth != null",
        "$positionID": {
          "type": {
            ".validate": "newData.isString()"
          },
          "items": {
            "$itemID": {
              ".validate": "newData.isString()"
            }
          }
        }
      }
    },
    "entities": {
      "$entityID": {
        ".read": "auth != null",
        "sectorID": {
          ".validate": "newData.isString()"
        },
        "type": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        }
      }
    }
  }
}
