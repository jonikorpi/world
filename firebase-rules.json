{"rules": {

  "locations": {
    ".write": "auth.worldmaster === true",
    ".indexOn": "player/playerID",
    "$locationID": {
      /* TODO generate complicated neighbour rules based on adj. locations */
      /* (pos(playerid).bx + "" == $binx &&  pos(playerid).by + "" == $biny) || //and the other 5 adjacent bin coords */
      ".read": "auth != null",
      "tile": { ".validate": "newData.isString()" },
      "player": {
        "playerID": { ".validate": "newData.isString()" },
        "locked": { ".validate": "newData.isBoolean()" },
        "immuneUntil": { ".validate": "newData.isNumber()" },
        "emoteType": { ".validate": "newData.isString()" },
        "emoteTurn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */
        "actionType": { ".validate": "newData.isString()" },
        "actionTurn": { ".validate": "newData.isNumber()" }, /* Use with `turnMounted` */
        "originalMaxHealth": { ".validate": "newData.isNumber()" },
        "maxHealth":         { ".validate": "newData.isNumber()" },
        "currentHealth":     { ".validate": "newData.isNumber()" },
        "originalAttack": { ".validate": "newData.isNumber()" },
        "currentAttack":  { ".validate": "newData.isNumber()" },
        "$other": { ".validate": "false" }
      },
      "$other": { ".validate": "false" }
    }
  },

  "playerSecrets": {
    ".write": "auth.worldmaster === true",
    "$playerID": {
      ".read": "(auth != null && auth.uid === $playerID) || auth.worldmaster === true",
      "location": { ".validate": "newData.isString()" },
      "$other": { ".validate": "false" }
    }
  },

  "players": {
    "$playerID": {
      ".read": "auth != null",
      ".write": "(auth != null && auth.uid === $playerID) || auth.worldmaster === true",
      /* TODO flag/mask/icon/logo */
      "$other": { ".validate": "false" }
    }
  }

}}
